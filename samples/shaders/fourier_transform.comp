#version 450

layout (local_size_x = 64) in;

layout (std140, binding = 0) readonly buffer In_Samples {
  // NOTE: we use vec4 because of std140's stupid alignment
  // rules. It's not possible to simply use floats and expect them to
  // be packed in memory.
  vec4 sample4[];
};

struct Vertex {
  vec2 position;
  vec3 color;
};

layout (std140, binding = 1) writeonly buffer Out_Freqs {
  Vertex verts[];
};

layout (push_constant) uniform Transform_Info {
  uint in_samples;
  uint out_freqs;
};

#include "complex.glsl"

void main() {
  uint index = gl_GlobalInvocationID.x;

  if (index >= out_freqs)
    return;

  float inv_N = 1.0 / in_samples;
  vec2 ampl = vec2(0.0);
  float k = index;
  for (uint i = 0; i < in_samples/4; i++) {
    ampl += sample4[i].x * imag_exp(-2.0 *  PI * k * float(4*i+0) * inv_N);
    ampl += sample4[i].y * imag_exp(-2.0 *  PI * k * float(4*i+1) * inv_N);
    ampl += sample4[i].z * imag_exp(-2.0 *  PI * k * float(4*i+2) * inv_N);
    ampl += sample4[i].w * imag_exp(-2.0 *  PI * k * float(4*i+3) * inv_N);
  }
  ampl *= inv_N;
  float X = length(ampl);

  // write 6 vertices
  const vec2 offsets[6] = {
    vec2(0.0, 0.0),
    vec2(1.0, 1.0),
    vec2(1.0, 0.0),
    vec2(1.0, 1.0),
    vec2(0.0, 0.0),
    vec2(0.0, 1.0),
  };
  const vec3 low_color = vec3(0.2, 1.0, 0.2);
  const vec3 high_color = vec3(1.0, 0.2, 1.0);

  for (int i = 0; i < 6; i++) {
    // verts[index*6+i].position.x = sample4[0].x;
    verts[index*6+i].position = offsets[i] * vec2(1.0 / out_freqs, X) + vec2(float(index) / out_freqs, 0.0);
    verts[index*6+i].color = mix(low_color, high_color, X);
  }
}
