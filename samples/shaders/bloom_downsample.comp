#version 450

layout (local_size_x = 16, local_size_y = 16) in;

layout (set = 0, binding = 0) uniform sampler2D big_texture;
layout (set = 0, binding = 1, rgba16f) uniform writeonly image2D small_texture;

// Copied from unity shader pack
// Better, temporally stable box filtering
// [Jimenez14] http://goo.gl/eomGso
// . . . . . . .
// . A . B . C .
// . . D . E . .
// . F . G . H .
// . . I . J . .
// . K . L . M .
// . . . . . . .
vec4 DownsampleBox13Tap(sampler2D tex, vec2 uv, vec2 texelSize) {
  vec4 A = texture(tex, (uv + texelSize * vec2(-1.0, -1.0)));
  vec4 B = texture(tex, (uv + texelSize * vec2(0.0, -1.0)));
  vec4 C = texture(tex, (uv + texelSize * vec2(1.0, -1.0)));
  vec4 D = texture(tex, (uv + texelSize * vec2(-0.5, -0.5)));
  vec4 E = texture(tex, (uv + texelSize * vec2(0.5, -0.5)));
  vec4 F = texture(tex, (uv + texelSize * vec2(-1.0, 0.0)));
  vec4 G = texture(tex, (uv));
  vec4 H = texture(tex, (uv + texelSize * vec2(1.0, 0.0)));
  vec4 I = texture(tex, (uv + texelSize * vec2(-0.5, 0.5)));
  vec4 J = texture(tex, (uv + texelSize * vec2(0.5, 0.5)));
  vec4 K = texture(tex, (uv + texelSize * vec2(-1.0, 1.0)));
  vec4 L = texture(tex, (uv + texelSize * vec2(0.0, 1.0)));
  vec4 M = texture(tex, (uv + texelSize * vec2(1.0, 1.0)));

  vec2 div = (1.0 / 4.0) * vec2(0.5, 0.125);

  vec4 o = (D + E + I + J) * div.x;
  o += (A + B + G + F) * div.y;
  o += (B + C + H + G) * div.y;
  o += (F + G + L + K) * div.y;
  o += (G + H + M + L) * div.y;

  return o;
}

void main() {
  ivec2 size = imageSize(small_texture);
  vec2 uv = vec2(gl_GlobalInvocationID.xy + 0.5f) / vec2(size);
  vec2 texelSize = vec2(1) / vec2(textureSize(big_texture, 0));

  if (any(greaterThanEqual(gl_GlobalInvocationID.xy, size)))
    return;

  imageStore(small_texture,
             ivec2(gl_GlobalInvocationID.xy),
             vec4(DownsampleBox13Tap(big_texture, uv, texelSize).rgb, 1.0f));
}
